pragma ton-solidity >= 0.70.0;

import "./AsterizmEnvs.tsol";
import "./AsterizmTransferFlags.tsol";
import "./AsterizmErrors.tsol";
import "../interfaces/IClientTransfer.tsol";
import "./AsterizmOwnable.tsol";
import "../libs/UintLib.tsol";

contract AsterizmClientTransfer is IClientTransfer, AsterizmOwnable {

    using UintLib for uint;

    /// Deploy contract event
    /// @param _selfAddress address
    event DeployClientTransferContractEvent(address _selfAddress);

    /// Deploy contract event
    event ExecuteTransferEvent();

    uint static hash_;
    /// Transfer type (true - inbound, false - outbound)
    bool static type_;

    bool private isInitialized;
    bool private isExecutedFlag;

    constructor() {
        require(tvm.pubkey() == 0, AsterizmErrors.TRANSFER__NON_ZERO_PUBLIC_KEY__ERROR);
        require(owner_.value != 0, AsterizmErrors.TRANSFER__WRONG_WALLET_OWNER__ERROR);
        require(owner_ == msg.sender, AsterizmErrors.TRANSFER__WRONG_OWNER__ERROR);

        emit DeployClientTransferContractEvent(address(this));

        tvm.rawReserve(AsterizmEnvs.TRANSFER__MIN_CONTRACT_BALANCE, 0);
        owner_.transfer({ value: 0, flag: AsterizmTransferFlags.ALL_NOT_RESERVED, bounce: false });
    }

    /// Only initialized modifier
    modifier onlyInitialized {
        require(isInitialized, AsterizmErrors.TRANSFER__NOT_INITIALISED__ERROR);
        _;
    }

    // Initialize contract after deploy
    function initialize() external onlyOwner {
        isInitialized = true;
    }

    /// Is transfer exists
    /// @param _smallTransferHash uint128
    /// @return uint, bool, uint8
    function isExists(uint128 _smallTransferHash) external internalMsg view responsible override onlyOwner onlyInitialized returns(uint, bool, uint8) {
        uint baseHash = hash_;
        require(baseHash.toUint128() == _smallTransferHash, AsterizmErrors.TRANSFER__WRONG_HASH__ERROR);
        return { value: 0, flag: AsterizmTransferFlags.REMAINING_GAS, bounce: false } (hash_, true, AsterizmEnvs.METHOD__CLIENT_HASH_EXISTS);
    }

    /// Is transfer executed
    /// @param _smallTransferHash uint128
    /// @return uint, bool, uint8
    function isExecuted(uint128 _smallTransferHash) external internalMsg view responsible override onlyOwner onlyInitialized returns(uint, bool, uint8) {
        uint baseHash = hash_;
        require(baseHash.toUint128() == _smallTransferHash, AsterizmErrors.TRANSFER__WRONG_HASH__ERROR);
        return { value: 0, flag: AsterizmTransferFlags.REMAINING_GAS, bounce: false } (hash_, isExecutedFlag, AsterizmEnvs.METHOD__CLIENT_HASH_EXECUTED);
    }

    /// Execute transfer
    /// @param _smallTransferHash uint128
    function executeTransfer(uint128 _smallTransferHash) external internalMsg override onlyOwner onlyInitialized {
        uint baseHash = hash_;
        require(baseHash.toUint128() == _smallTransferHash, AsterizmErrors.TRANSFER__WRONG_HASH__ERROR);
        tvm.rawReserve(AsterizmEnvs.TRANSFER__MIN_CONTRACT_BALANCE, 0);
        isExecutedFlag = true;

        emit ExecuteTransferEvent();

        msg.sender.transfer({ value: 0, flag: AsterizmTransferFlags.ALL_NOT_RESERVED, bounce: false });
    }
}
