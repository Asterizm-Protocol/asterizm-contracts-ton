pragma ton-solidity >= 0.70.0;
pragma AbiHeader expire;

import "../interfaces/IInitializerSender.tsol";
import "../interfaces/IClientReceiverContract.tsol";
import "./AsterizmErrors.tsol";
import "./AsterizmEnvs.tsol";
import "./AsterizmTransferFlags.tsol";
import "./AsterizmRefund.tsol";
import "../libs/AddressLib.tsol";
import "../libs/UintLib.tsol";
import "../libs/AsterizmHashLib.tsol";
import "./AsterizmInitializerTransfer.tsol";
import "./AsterizmClientTransfer.tsol";
import "./AsterizmRefundConfirmation.tsol";

abstract contract AsterizmClient is IClientReceiverContract, AsterizmRefund {

    using AddressLib for address;
    using UintLib for uint;
    using AsterizmHashLib for TvmCell;

    /// Set initializer event
    /// @param _initializerAddress address  Initializer address
    event SetInitializerEvent(address _initializerAddress);

    /// Set external relay event
    /// @param _externalRelayAddress address  External relay address
    event SetExternalRelayEvent(address _externalRelayAddress);

    /// Set local chain id event
    /// @param _localChainId uint64
    event SetLocalChainIdEvent(uint64 _localChainId);

    /// Initiate transfer event (for client server logic)
    /// @param _dstChainId uint64  Destination chein ID
    /// @param _dstAddress address  Destination address
    /// @param _txId uint  Transaction ID
    /// @param _transferHash uint  Transfer hash
    /// @param _payload TvmCell  Payload
    event InitiateTransferEvent(uint64 _dstChainId, uint _dstAddress, uint _txId, uint _transferHash, TvmCell _payload);

    /// Payload receive event (for client server logic)
    /// @param _srcChainId uint64  Source chain ID
    /// @param _srcAddress address  Source address
    /// @param _txId uint  Transfer ID
    /// @param _transferHash uint  Transaction hash
    event PayloadReceivedEvent(uint64 _srcChainId, uint _srcAddress, uint _txId, uint _transferHash);

    /// Add trusted address event
    /// @param _chainId uint64  Chain ID
    /// @param _address bytes  Trusted address
    event AddTrustedSourceAddressEvent(uint64 _chainId, uint _address);

    /// Remove trusted address event
    /// @param _chainId uint64  Chain ID
    /// @param _address bytes  Trusted address
    event RemoveTrustedSourceAddressEvent(uint64 _chainId, uint _address);

    /// Set use encryption flag
    /// @param _flag bool  Use encryption flag
    event SetUseEncryptionEvent(bool _flag);

    /// Set notify transfer sending result event
    /// @param _flag bool  Notify transfer sending result flag
    event SetNotifyTransferSendingResultEvent(bool _flag);

    /// Set disable hash validation flag event
    /// @param _flag bool  Use force order flag
    event SetDisableHashValidationEvent(bool _flag);

    /// Asterizm client transfet contract deploy event
    /// @param _address address
    event TransferContractDeployEvent(address _address);

    /// Transfer error event
    /// @param _transferHash uint
    /// @param _errorCode uint16
    event TransferErrorEvent(uint _transferHash, uint16 _errorCode);

    /// Update chains list event
    event UpdateChainsListEvent();

    /// Success executed transafer event
    /// @param _transferHash uint  Transfer hash
    event SuccessTransferExecutedEvent(uint _transferHash);

    /// Error executed transafer event
    /// @param _transferHash uint  Transfer hash
    /// @param _errorCode uint16  Error code
    event ErrorTransferExecutedEvent(uint _transferHash, uint16 _errorCode);

    /// Resend Asterizm transfer event
    /// @param _transferHash uint  Transfer hash
    /// @param _feeAmount uint128  Additional fee amount
    event ResendAsterizmTransferEvent(uint _transferHash, uint128 _feeAmount);

    /// Transfer sending result notification event
    /// @param _transferHash bytes32  Transfer hash
    /// @param _statusCode uint8  Status code
    event TransferSendingResultNotification(bytes32 indexed _transferHash, uint8 _statusCode);

    struct AsterizmTransfer {
        bool exists;
        uint transferHash;
        bool successIzReceive;
        bool successClReceive;
        bool successClExecute;
        uint128 msgValue;
        TvmCell dto;
    }

    mapping(uint64 => uint) private trustedAddresses;
    mapping(uint64 => AsterizmChain) private chains;
    mapping(uint128 => AsterizmTransfer) private inboundTransfers;
    mapping(uint128 => AsterizmTransfer) private outboundTransfers;
    uint private trustedAddressCount;
    uint private txId;
    uint64 private localChainId;
    TvmCell private initializerTransferCode;
    TvmCell private clientTransferCode;
    address private externalRelay;

    IInitializerSender static initializerLib_;
    bool static notifyTransferSendingResult_;
    bool static disableHashValidation_;
    uint8 static hashVersion_; // see AsterizmHashLib for available versions information

    // Call initialize() after deploy
    constructor() {
        require(owner_.value != 0, AsterizmErrors.TRANSFER__WRONG_WALLET_OWNER__ERROR);
        tvm.accept();

        emit SetInitializerEvent(address(initializerLib_));
        emit SetNotifyTransferSendingResultEvent(notifyTransferSendingResult_);
        emit SetDisableHashValidationEvent(disableHashValidation_);
        _addSenderPrivate(owner());

        tvm.rawReserve(AsterizmEnvs.CLIENT__MIN_CONTRACT_BALANCE, 0);
        owner_.transfer({
            value: 0,
            flag: AsterizmTransferFlags.ALL_NOT_RESERVED,
            bounce: false
        });
    }

    /// On bounce
    /// @param _slice TvmSlice
    onBounce(TvmSlice _slice) external {
        uint32 functionId = _slice.load(uint32);
        if (functionId == tvm.functionId(AsterizmInitializerTransfer.isExists)) {
            ( , uint128 smallTransferHash ) = _slice.loadFunctionParams(AsterizmInitializerTransfer.isExists);
            uint transferHash = inboundTransfers[smallTransferHash].transferHash;
            delete inboundTransfers[smallTransferHash];
            emit TransferErrorEvent(transferHash, AsterizmErrors.CLIENT__INVALID_HASH_CALLBACK__ERROR);
        }

        if (
            functionId == tvm.functionId(AsterizmClientTransfer.isExists) ||
            functionId == tvm.functionId(AsterizmClientTransfer.isExecuted) ||
            functionId == tvm.functionId(AsterizmClientTransfer.executeTransfer)
        ) {
            ( , uint128 smallTransferHash ) = _slice.loadFunctionParams(AsterizmClientTransfer.isExists);
            uint transferHash = outboundTransfers[smallTransferHash].transferHash;
            delete outboundTransfers[smallTransferHash];
            delete inboundTransfers[smallTransferHash];
            emit TransferErrorEvent(transferHash, AsterizmErrors.CLIENT__OUTBOUND_TRANSFER_NOT_EXISTS_CALLBACK__ERROR);
        }

        if (functionId == tvm.functionId(AsterizmRefundConfirmation.isExists)) {
            // Transfer is not refunded, so we need to receive it
            tvm.rawReserve(AsterizmEnvs.CLIENT__MIN_CONTRACT_BALANCE, 0);
            tvm.accept();

            ( , uint128 smallTransferHash ) = _slice.loadFunctionParams(AsterizmRefundConfirmation.isExists);
            require(confirmationTransfers[smallTransferHash].exists, AsterizmErrors.REFUND__WRONG_SMALL_TRANSFER_HASH__ERROR);

            ClAsterizmReceiveRequestDto dto = abi.decode(confirmationTransfers[smallTransferHash].dto, (ClAsterizmReceiveRequestDto));
            require(msg.sender == _getRefundConfirmationContractAddress(dto.transferHash), AsterizmErrors.REFUND__ONLY_REFUND_CONFIRMATION__ERROR);

            delete confirmationTransfers[smallTransferHash];
            _baseAsterizmReceiveLogic(dto);
        }

        if (functionId == tvm.functionId(initializerLib_.initTransfer)) {
            emit TransferErrorEvent(uint(0), AsterizmErrors.CLIENT__INITIALIZER_INIT_TRANSFER__ERROR);
        }
    }

    // Initialize contract after deploy
    function initialize() public view onlyOwner {
        initializerLib_.getLocalChainId{
            value: AsterizmEnvs.CLIENT__GETTER_VALUE,
            callback: onUpdateLocalChainIdCallback
        }();

        initializerLib_.getInitializerTransferCode{
            value: AsterizmEnvs.CLIENT__GETTER_VALUE,
            callback: onUpdateInitializerTransferCodeCallback
        }();

        initializerLib_.getClientTransferCode{
            value: AsterizmEnvs.CLIENT__GETTER_VALUE,
            callback: onUpdateClientTransferCodeCallback
        }();

        initializerLib_.getChainsList{
            value: AsterizmEnvs.CLIENT__GETTER_VALUE,
            callback: onUpdateChainsListCallback
        }();
    }

    /// Update initializer transfer code callback
    function onUpdateInitializerTransferCodeCallback(TvmCell _code) public onlyInitializer {
        initializerTransferCode = _code;

        tvm.rawReserve(AsterizmEnvs.CLIENT__MIN_CONTRACT_BALANCE, 0);
        owner().transfer({
                value: 0,
                flag: AsterizmTransferFlags.ALL_NOT_RESERVED,
                bounce: false
        });
    }

    /// Update initializer transfer code callback
    function onUpdateClientTransferCodeCallback(TvmCell _code) public onlyInitializer {
        clientTransferCode = _code;

        tvm.rawReserve(AsterizmEnvs.CLIENT__MIN_CONTRACT_BALANCE, 0);
        owner().transfer({
                value: 0,
                flag: AsterizmTransferFlags.ALL_NOT_RESERVED,
                bounce: false
        });
    }

    /// Update local chains id callback
    function onUpdateLocalChainIdCallback(uint64 _localChainId) public onlyInitializer {
        localChainId = _localChainId;

        address currentAddress = address(this);
        _addTrustedAddressPrivate(localChainId, currentAddress.toUint());

        tvm.rawReserve(AsterizmEnvs.CLIENT__MIN_CONTRACT_BALANCE, 0);
        owner().transfer({
                value: 0,
                flag: AsterizmTransferFlags.ALL_NOT_RESERVED,
                bounce: false
        });
    }

    /** Modifiers */

    /// Only initializer modifier
    modifier onlyInitializer {
        require(msg.sender == address(initializerLib_), AsterizmErrors.CLIENT__ONLY_INITIALIZER__ERROR);
        _;
    }

    /// Only owner or initializer modifier
    modifier onlyOwnerOrInitializer {
        require(msg.sender == owner() || msg.sender == address(initializerLib_), AsterizmErrors.CLIENT__ONLY_OWNER_OR_INITIALIZER__ERROR);
        _;
    }

    /// Only trusted address modifier
    modifier onlyTrustedAddress(uint64 _chainId, uint _address) {
        require(trustedAddresses[_chainId] == _address, AsterizmErrors.CLIENT__WRONG_TRUSTED_ADDRESS__ERROR);
        _;
    }

    /// Only nvalid transfer hash modifier
    /// @param _dto ClAsterizmReceiveRequestDto  Transfer data
    modifier onlyValidTransferHash(ClAsterizmReceiveRequestDto _dto) {
        if (!disableHashValidation_) {
            require(
                _validTransferHash(_dto.srcChainId, _dto.srcAddress, _dto.dstChainId, _dto.dstAddress, _dto.txId, _dto.payload, _dto.transferHash),
                AsterizmErrors.CLIENT__INVALID_HASH__ERROR
            );
        }
        _;
    }

    /// Send residue modifier
    modifier sendResidue() {
        tvm.rawReserve(AsterizmEnvs.CLIENT__MIN_CONTRACT_BALANCE, 0);
        _;
        msg.sender.transfer({
            value: 0,
            flag: AsterizmTransferFlags.ALL_NOT_RESERVED,
            bounce: false
        });
    }


    /*******************/
    /** Internal logic */
    /*******************/

    /** External contracts */

    /// Return initializer transfer contract
    /// @param _transferHash uint  Transfer hash
    /// @return address  Transfer hash contract
    function _getInitializerTransferContractAddress(uint _transferHash) private view returns(address) {
        return address(tvm.hash(
            tvm.buildStateInit({
                contr: AsterizmInitializerTransfer,
                varInit: {
                    owner_: address(initializerLib_),
                    hash_: _transferHash
                },
                pubkey: 0,
                code: initializerTransferCode
            })
        ));
    }

    /// Return initializer transfer contract
    /// @param _transferHash uint  Transfer hash
    /// @return AsterizmInitializerTransfer  Transfer hash contract
    function _getInitializerTransferContract(uint _transferHash) private view returns(AsterizmInitializerTransfer) {
        return AsterizmInitializerTransfer(_getInitializerTransferContractAddress(_transferHash));
    }

    /// Return client transfer contract status init
    /// @param _transferHash uint  Transfer hash
    /// @param _transferType bool  Transfer type
    /// @return TvmCell  Transfer hash contract state init
    function _getClientTransferContractStatusInit(uint _transferHash, bool _transferType) private view returns(TvmCell) {
        return tvm.buildStateInit({
            contr: AsterizmClientTransfer,
            varInit: {
                owner_: address(this),
                hash_: _transferHash,
                type_: _transferType
            },
            pubkey: 0,
            code: clientTransferCode
        });
    }

    /// Deploy client transfer contract
    /// @param _transferHash uint  Transfer hash
    /// @param _transferType bool  Transfer type
    /// @return address  Transfer hash contract address
    function _deployClientTransferContract(uint _transferHash, bool _transferType) private view returns(address) {
        address contractAddress = new AsterizmClientTransfer{
            stateInit: _getClientTransferContractStatusInit(_transferHash, _transferType),
            value: AsterizmEnvs.TRANSFER__MIN_DEPLOY_CONTRACT_VALUE,
            wid: address(this).wid,
            flag: AsterizmTransferFlags.SENDER_PAYS_FEES
        }();
        emit TransferContractDeployEvent(contractAddress);

        return contractAddress;
    }

    /// Return client transfer contract
    /// @param _transferHash uint  Transfer hash
    /// @param _transferType bool  Transfer type
    /// @return AsterizmClientTransfer  Transfer hash contract address
    function _getClientTransferContract(uint _transferHash, bool _transferType) private view returns(AsterizmClientTransfer) {
        return AsterizmClientTransfer(_getClientTransferContractAddress(_transferHash, _transferType));
    }

    /// Return client transfer contract
    /// @param _transferHash uint  Transfer hash
    /// @param _transferType bool  Transfer type
    /// @return address  Transfer hash contract address
    function _getClientTransferContractAddress(uint _transferHash, bool _transferType) private view returns(address) {
        return address(tvm.hash(_getClientTransferContractStatusInit(_transferHash, _transferType)));
    }


    /** Other internal functions */

    /// Set local chain id library
    /// _localChainId uint64
    function _setLocalChainId(uint64 _localChainId) private {
        localChainId = _localChainId;
        emit SetLocalChainIdEvent(_localChainId);
    }

    /// Return chain type by id
    /// @param _chainId uint64  Chain id
    /// @return uint8  Chain type
    function _getChainType(uint64 _chainId) internal view returns(uint8) {
        return chains[_chainId].chainType;
    }

    /// Set external relay address (one-time initiation)
    /// _externalRelay address  External relay address
    function setExternalRelay(address _externalRelay) public onlyOwner {
        require(externalRelay == address(0), AsterizmErrors.CLIENT__EXTERNAL_RELAY_SET_ALREADY__ERROR);
        externalRelay = _externalRelay;
        emit SetExternalRelayEvent(_externalRelay);
    }

    /// Return external relay
    /// @return address  External relay address
    function getExternalRelay() external view returns(address) {
        return externalRelay;
    }

    /// Add trusted source address (private)
    /// @param _chainId uint64  Chain ID
    /// @param _trustedAddress uint  Trusted address
    function _addTrustedAddressPrivate(uint64 _chainId, uint _trustedAddress) private {
        trustedAddresses[_chainId] = _trustedAddress;

        emit AddTrustedSourceAddressEvent(_chainId, _trustedAddress);
    }

    /// Add trusted addresses
    /// @param _chainIds uint64  Chain ID
    /// @param _trustedAddresses uint  Trusted address
    function addTrustedAddress(uint64 _chainIds, uint _trustedAddresses) external onlyOwner sendResidue {
        _addTrustedAddressPrivate(_chainIds, _trustedAddresses);
    }

    /// Add trusted addresses
    /// @param _chainIds uint64[]  Chain IDs
    /// @param _trustedAddresses uint[]  Trusted addresses
    function addTrustedAddresses(uint64[] _chainIds, uint[] _trustedAddresses) external onlyOwner sendResidue {
        for (uint i = 0; i < _chainIds.length; i++) {
            _addTrustedAddressPrivate(_chainIds[i], _trustedAddresses[i]);
        }
    }

    /// Remove trusted address
    /// @param _chainId uint64  Chain ID
    function removeTrustedSourceAddress(uint64 _chainId) external onlyOwner sendResidue {
        require(trustedAddresses[_chainId] != uint(0), AsterizmErrors.CLIENT__TRUSTED_ADDRESS_NOT_FOUND__ERROR);
        uint removingAddress = trustedAddresses[_chainId];
        delete trustedAddresses[_chainId];

        emit RemoveTrustedSourceAddressEvent(_chainId, removingAddress);
    }

    /// Update chains list
    function updateChainsList() external view onlyOwner sendResidue {
        initializerLib_.getChainsList{
            value: AsterizmEnvs.CLIENT__MIN_CONTRACT_BALANCE,
            callback: onUpdateChainsListCallback
        }();
    }

    /// Update chains list callback
    function onUpdateChainsListCallback(mapping(uint64 => AsterizmChain) _chains) public onlyInitializer {
        chains = _chains;
        emit UpdateChainsListEvent();

        tvm.rawReserve(AsterizmEnvs.CLIENT__MIN_CONTRACT_BALANCE, 0);
        owner().transfer({
            value: 0,
            flag: AsterizmTransferFlags.ALL_NOT_RESERVED,
            bounce: false
        });
    }


    /// Build transfer hash
    /// @param _srcChainId uint64  Chain ID
    /// @param _srcAddress uint  Address
    /// @param _dstChainId uint64  Chain ID
    /// @param _dstAddress uint  Address
    /// @param _txId uint  Transaction ID
    /// @param _payload TvmCell  Payload
    /// @return bytes32
    function _buildTransferHash(uint64 _srcChainId, uint _srcAddress, uint64 _dstChainId, uint _dstAddress, uint _txId, TvmCell _payload) internal view returns(uint) {
        TvmCell fullPayload = abi.encode(_srcChainId, _srcAddress, _dstChainId, _dstAddress, _txId, bytes(_payload.toSlice()));

        return _getChainType(_srcChainId) == _getChainType(_dstChainId) ? fullPayload.buildSimpleHash() : fullPayload.buildCrosschainHashWithVersion(hashVersion_);
    }

    /// Check is transfer hash valid
    /// @param _srcChainId uint64  Chain ID
    /// @param _srcAddress uint  Address
    /// @param _dstChainId uint64  Chain ID
    /// @param _dstAddress uint  Address
    /// @param _txId uint  Transaction ID
    /// @param _payload TvmCell  Payload
    /// @param _transferHash uint  Transfer hash
    /// @return bool
    function _validTransferHash(uint64 _srcChainId, uint _srcAddress, uint64 _dstChainId, uint _dstAddress, uint _txId, TvmCell _payload, uint _transferHash) internal view returns(bool) {
        return _buildTransferHash(_srcChainId, _srcAddress, _dstChainId, _dstAddress, _txId, _payload) == _transferHash;
    }

    /// Return txId
    /// @return uint
    function _getTxId() internal view returns(uint) {
        return txId;
    }

    /// Return local chain id
    /// @return uint64
    function _getLocalChainId() internal view returns(uint64) {
        require(localChainId != 0, AsterizmErrors.CLIENT__LOCAL_CHAIN_ID_NOT_SET__ERROR);

        return localChainId;
    }

    /// Return trusted address by chain id
    function _getTrustedAddressByChainId(uint64 _chainId) private view returns(uint) {
        require(trustedAddresses[_chainId] != uint(0), AsterizmErrors.CLIENT__TRUSTED_ADDRESS_NOT_FOUND__ERROR);

        return trustedAddresses[_chainId];
    }

    /// Return initializer address
    /// @return address
    function getInitializerAddress() external view returns(address) {
        return address(initializerLib_);
    }

    /// Return trusted src addresses
    /// @param _chainId uint64  Chain id
    /// @return AsterizmChain
    function getTrustedAddresses(uint64 _chainId) external view returns(uint) {
        return trustedAddresses[_chainId];
    }

    /// Return disable hash validation flag
    /// @return bool
    function getDisableHashValidation() external view returns(bool) {
        return disableHashValidation_;
    }

    /// Return notify transfer sending result flag
    /// @return bool
    function getNotifyTransferSendingResult() external view returns(bool) {
        return notifyTransferSendingResult_;
    }


    /*******************/
    /** External logic */
    /*******************/

    /** Sending logic */

    /// Initiate transfer event
    /// Generate event for client server
    /// @param _dstChainId uint64  Destination chain ID
    /// @param _payload TvmCell  Payload
    function _initAsterizmTransferEvent(uint64 _dstChainId, TvmCell _payload) internal returns(uint) {
        uint id = txId++;
        address currentAddress = address(this);
        uint dstAddress = _getTrustedAddressByChainId(_dstChainId);
        uint transferHash = _buildTransferHash(_getLocalChainId(), currentAddress.toUint(), _dstChainId, dstAddress, id, _payload);

        _deployClientTransferContract(transferHash, false);

        emit InitiateTransferEvent(_dstChainId, dstAddress, id, transferHash, _payload);

        return transferHash;
    }

    /// External initiation transfer
    /// This function needs for external initiating non-encoded payload transfer
    /// @param _dstChainId uint64  Destination chain ID
    /// @param _txId uint  Transaction ID
    /// @param _transferHash uint  Transfer hash
    /// @param _transferFeeValue uint128  Transfer fee value (payment for destination chain contracts + system fee)
    function initAsterizmTransfer(uint64 _dstChainId, uint _txId, uint _transferHash, uint128 _transferFeeValue) external onlySender {
         // msg.value include payment for contracts logic in source chain + payment for destination chain contracts + system fee
        require(_transferFeeValue < msg.value, AsterizmErrors.CLIENT__TRANSFER_FEE_VALUE_IS_TOO_SMALL_ERROR);
        ClInitTransferRequestDto dto = _buildClInitTransferRequestDto(_dstChainId, _getTrustedAddressByChainId(_dstChainId), _txId, _transferHash, _transferFeeValue);
        _initAsterizmTransferPrivate(dto);
    }

    /// Private initiation transfer
    /// This function needs for internal initiating non-encoded payload transfer
    /// @param _dto ClInitTransferRequestDto  Init transfer DTO
    function _initAsterizmTransferPrivate(ClInitTransferRequestDto _dto) private {
        require(address(this).balance >= _dto.dstFeeAmount, AsterizmErrors.CLIENT__BALANCE_NOT_ENOUGH__ERROR);
        require(_dto.txId <= _getTxId(), AsterizmErrors.CLIENT__WRONG_TX_ID__ERROR);

        uint128 smallTransferHash = _dto.transferHash.toUint128();

        outboundTransfers[smallTransferHash].exists = true;
        outboundTransfers[smallTransferHash].transferHash = _dto.transferHash;
        outboundTransfers[smallTransferHash].dto = abi.encode(_dto);
        outboundTransfers[smallTransferHash].msgValue = msg.value - AsterizmEnvs.CLIENT__INIT_TRANSFER_TOTAL;

        AsterizmClientTransfer hashContract = _getClientTransferContract(_dto.transferHash, false);

        hashContract.isExists{
            value: AsterizmEnvs.TRANSFER__GET_REQUEST_VALUE,
            bounce: true,
            callback: onInitAsterizmTransferCallback
        }(smallTransferHash);
        hashContract.isExecuted{
            value: AsterizmEnvs.TRANSFER__GET_REQUEST_VALUE,
            bounce: true,
            callback: onInitAsterizmTransferCallback
        }(smallTransferHash);
    }

    /// Init asterizm transfer callback
    /// @param _transferHash uint  Transfer hash
    /// @param _flag bool  Result flag
    /// @param _method uint8  Method flag
    function onInitAsterizmTransferCallback(uint _transferHash, bool _flag, uint8 _method) public {
        uint128 smallTransferHash = _transferHash.toUint128();
        require(outboundTransfers[smallTransferHash].exists, AsterizmErrors.CLIENT__TRANSFER_HASH_NOT_FOUND__ERROR);
        require(outboundTransfers[smallTransferHash].transferHash == _transferHash, AsterizmErrors.CLIENT__WRONG_TRANSFER_HASH__ERROR);
        require(_method == AsterizmEnvs.METHOD__CLIENT_HASH_EXISTS || _method == AsterizmEnvs.METHOD__CLIENT_HASH_EXECUTED, AsterizmErrors.CLIENT__NOT_SUPPORTED_METHOD__ERROR);
        AsterizmClientTransfer hashContract = _getClientTransferContract(_transferHash, false);
        require(address(hashContract) == msg.sender, AsterizmErrors.CLIENT__WRONG_TRANSFER_HASH_ADDRESS__ERROR);

        tvm.accept();

        if (_method == AsterizmEnvs.METHOD__CLIENT_HASH_EXISTS) {
            if (!_flag) { // if hash not exists
                delete outboundTransfers[smallTransferHash];
                emit ErrorTransferExecutedEvent(_transferHash, AsterizmErrors.CLIENT__TRANSFER_NOT_RECEIVED__ERROR);
                return;
            }

            outboundTransfers[smallTransferHash].successClReceive = true;
        } else if (_method == AsterizmEnvs.METHOD__CLIENT_HASH_EXECUTED) {
            if (_flag) { // if hash executed already
                delete outboundTransfers[smallTransferHash];
                emit ErrorTransferExecutedEvent(_transferHash, AsterizmErrors.CLIENT__TRANSFER_EXECUTED_ALREADY__ERROR);
                return;
            }

            outboundTransfers[smallTransferHash].successClExecute = true;
        }

        if (outboundTransfers[smallTransferHash].successClReceive && outboundTransfers[smallTransferHash].successClExecute) {
            ClInitTransferRequestDto dto = abi.decode(outboundTransfers[smallTransferHash].dto, (ClInitTransferRequestDto));
            uint128 msgValue = outboundTransfers[smallTransferHash].msgValue;
            delete outboundTransfers[smallTransferHash];
            initializerLib_.initTransfer{value: msgValue, flag: AsterizmTransferFlags.SENDER_PAYS_FEES, bounce: true} (
                _buildIzInitTransferRequestDto(dto.dstChainId, dto.dstAddress, dto.txId, dto.transferHash, dto.dstFeeAmount, externalRelay, notifyTransferSendingResult_)
            );

            hashContract.executeTransfer{ value: AsterizmEnvs.TRANSFER__SET_REQUEST_VALUE }(smallTransferHash);
        }
    }

    /// Resend failed by fee amount transfer
    /// @param _transferHash uint  Transfer hash
    /// @param _feeAmount uint128  Transfer fee amount
    function resendAsterizmTransfer(uint _transferHash, uint128 _feeAmount) external view onlySender {
        uint128 fullAmount = _feeAmount + AsterizmEnvs.CLIENT__RESEND_TRANSFER_FEE_VALUE;
        require(fullAmount <= msg.value, AsterizmErrors.CLIENT__TRANSFER_FEE_VALUE_IS_TOO_SMALL_ERROR);
        require(address(this).balance >= fullAmount, AsterizmErrors.CLIENT__BALANCE_NOT_ENOUGH__ERROR);

        tvm.accept();

        emit ResendAsterizmTransferEvent(_transferHash, _feeAmount);
        initializerLib_.resendTransfer{ value: fullAmount, flag: AsterizmTransferFlags.SENDER_PAYS_FEES, bounce: false }(_transferHash, _feeAmount, externalRelay);
    }

    /// Transfer sending result notification
    /// @param _transferHash bytes32  Transfer hash
    /// @param _statusCode uint8  Status code
    function transferSendingResultNotification(bytes32 _transferHash, uint8 _statusCode) external view onlyInitializer {
        if (notifyTransferSendingResult_) {
            emit TransferSendingResultNotification(_transferHash, _statusCode);
        }

        address(initializerLib_).transfer({ value: 0, flag: AsterizmTransferFlags.REMAINING_GAS, bounce: false });
    }


    /** Receiving logic */

    /// Receive payload from initializer
    /// @param _dto IzAsterizmReceiveRequestDto  Method DTO
    function asterizmIzReceive(IzAsterizmReceiveRequestDto _dto) external internalMsg override onlyInitializer {
        _asterizmReceiveEncoded(_dto);
    }

    /// Receive encoded payload
    /// This methos needs for transfer encoded data
    /// You must use onlyTrustedAddress modifier!
    /// @param _dto IzAsterizmReceiveRequestDto  Method DTO
    function _asterizmReceiveEncoded(IzAsterizmReceiveRequestDto _dto) private view
        onlyOwnerOrInitializer
        onlyTrustedAddress(_dto.srcChainId, _dto.srcAddress)
    {
        tvm.accept();

        _deployClientTransferContract(_dto.transferHash, true);
        emit PayloadReceivedEvent(_dto.srcChainId, _dto.srcAddress, _dto.txId, _dto.transferHash);
    }

    /// Receive payload from client server
    /// @param _srcChainId uint64  Source chain ID
    /// @param _srcAddress uint  Source address
    /// @param _txId uint  Transaction ID
    /// @param _transferHash uint  Transfer hash
    /// @param _payload TvmCell  Payload
    function asterizmClReceive(uint64 _srcChainId, uint _srcAddress, uint _txId, uint _transferHash, TvmCell _payload) external override onlySender {
        require(msg.value >= AsterizmEnvs.CLIENT__MIN_RECEIVE_VALUE, AsterizmErrors.CLIENT__NOT_ENOUGH_COINS__ERROR);
        ClAsterizmReceiveRequestDto dto = _buildClAsterizmReceiveRequestDto(_srcChainId, _srcAddress, localChainId, _getTrustedAddressByChainId(localChainId), _txId, _transferHash, _payload);
        _asterizmReceiveInternal(dto);
    }

    /// Receive non-encoded payload for internal usage
    /// @param _dto ClAsterizmReceiveRequestDto  Method DTO
    function _asterizmReceiveInternal(ClAsterizmReceiveRequestDto _dto) private
        onlyTrustedAddress(_dto.srcChainId, _dto.srcAddress)
        onlyValidTransferHash(_dto)
    {
        if (_getIsRefundLogicAvailable()) {
            _checkRefundConfirmation(_dto);
            return;
        }

        _baseAsterizmReceiveLogic(_dto);
    }

    /// Base Asterizm transfer receive logic
    /// @param _dto ClAsterizmReceiveRequestDto  Method DTO
    function _baseAsterizmReceiveLogic(ClAsterizmReceiveRequestDto _dto) internal override
        onlyTrustedAddress(_dto.srcChainId, _dto.srcAddress)
        onlyValidTransferHash(_dto)
    {
        uint128 smallTransferHash = _dto.transferHash.toUint128();
        inboundTransfers[smallTransferHash] = AsterizmTransfer(true, _dto.transferHash, false, false, false, 0, abi.encode(_dto));

        AsterizmClientTransfer clHashContract = _getClientTransferContract(_dto.transferHash, true);

        clHashContract.isExists{
            value: AsterizmEnvs.TRANSFER__GET_REQUEST_VALUE,
            bounce: true,
            callback: onAsterizmReceiveCallback
        }(smallTransferHash);
        clHashContract.isExecuted{
            value: AsterizmEnvs.TRANSFER__GET_REQUEST_VALUE,
            bounce: true,
            callback: onAsterizmReceiveCallback
        }(smallTransferHash);
        _getInitializerTransferContract(_dto.transferHash).isExists{
            value: AsterizmEnvs.TRANSFER__GET_REQUEST_VALUE,
            bounce: true,
            callback: onAsterizmReceiveCallback
        }(smallTransferHash);
    }

    /// Asterizm receive transfer callback
    /// @param _transferHash uint  Transfer hash
    /// @param _flag bool  Result flag
    /// @param _method uint8  Method flag
    function onAsterizmReceiveCallback(uint _transferHash, bool _flag, uint8 _method) public {
        uint128 smallTransferHash = _transferHash.toUint128();
        require(inboundTransfers[smallTransferHash].exists, AsterizmErrors.CLIENT__TRANSFER_HASH_NOT_FOUND__ERROR);
        require(inboundTransfers[smallTransferHash].transferHash == _transferHash, AsterizmErrors.CLIENT__WRONG_TRANSFER_HASH__ERROR);
        require(
            _method == AsterizmEnvs.METHOD__INITIALIZER_HASH_EXISTS ||
            _method == AsterizmEnvs.METHOD__CLIENT_HASH_EXISTS ||
            _method == AsterizmEnvs.METHOD__CLIENT_HASH_EXECUTED,
            AsterizmErrors.CLIENT__NOT_SUPPORTED_METHOD__ERROR
        );
        AsterizmClientTransfer clHashContract = _getClientTransferContract(_transferHash, true);
        AsterizmInitializerTransfer izHashContract = _getInitializerTransferContract(_transferHash);
        require(address(clHashContract) == msg.sender || address(izHashContract) == msg.sender, AsterizmErrors.CLIENT__WRONG_TRANSFER_HASH_ADDRESS__ERROR);

        tvm.accept();

        if (_method == AsterizmEnvs.METHOD__INITIALIZER_HASH_EXISTS) {
            if (!_flag) { // if hash not exists
                delete inboundTransfers[smallTransferHash];
                emit ErrorTransferExecutedEvent(_transferHash, AsterizmErrors.CLIENT__INVALID_HASH__ERROR);
                return;
            }

            inboundTransfers[smallTransferHash].successIzReceive = true;
        } else if (_method == AsterizmEnvs.METHOD__CLIENT_HASH_EXISTS) {
            if (!_flag) { // if hash not exists
                delete inboundTransfers[smallTransferHash];
                emit ErrorTransferExecutedEvent(_transferHash, AsterizmErrors.CLIENT__TRANSFER_NOT_RECEIVED__ERROR);
                return;
            }

            inboundTransfers[smallTransferHash].successClReceive = true;
        } else if (_method == AsterizmEnvs.METHOD__CLIENT_HASH_EXECUTED) {
            if (_flag) { // if hash executed already
                delete inboundTransfers[smallTransferHash];
                emit ErrorTransferExecutedEvent(_transferHash, AsterizmErrors.CLIENT__TRANSFER_EXECUTED_ALREADY__ERROR);
                return;
            }

            inboundTransfers[smallTransferHash].successClExecute = true;
        }

        AsterizmTransfer currentTransfer = inboundTransfers[smallTransferHash];

        if (
            currentTransfer.successIzReceive &&
            currentTransfer.successClReceive &&
            currentTransfer.successClExecute
        ) {
            ClAsterizmReceiveRequestDto dto = abi.decode(currentTransfer.dto, (ClAsterizmReceiveRequestDto));
            delete inboundTransfers[smallTransferHash];
            tvm.rawReserve(AsterizmEnvs.CLIENT__MIN_CONTRACT_BALANCE, 0);

            uint16 errorCode = _asterizmReceive(dto);
            if (errorCode > 0) {
                emit ErrorTransferExecutedEvent(dto.transferHash, errorCode);
                return;
            }

            clHashContract.executeTransfer{
                value: AsterizmEnvs.TRANSFER__SET_REQUEST_VALUE,
                flag: AsterizmTransferFlags.SENDER_PAYS_FEES
            }(smallTransferHash);

            emit SuccessTransferExecutedEvent(dto.transferHash);
        }
    }

    /// Receive payload
    /// You must realize this function if you want to transfer payload
    /// If disableHashValidation = true you must validate transferHash with _validTransferHash() method for more security!
    /// @param _dto ClAsterizmReceiveRequestDto  Method DTO
    /// @return uint16  Return error code. 0 - ok, > 0 - error
    function _asterizmReceive(ClAsterizmReceiveRequestDto _dto) internal virtual returns(uint16) {}
}
