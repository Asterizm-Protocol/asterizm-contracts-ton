pragma ton-solidity >= 0.70.0;

import "./AsterizmEnvs.tsol";
import "./AsterizmTransferFlags.tsol";
import "./AsterizmErrors.tsol";
import "../interfaces/IRefundConfirmation.tsol";
import "./AsterizmOwnable.tsol";
import "../libs/UintLib.tsol";

contract AsterizmRefundConfirmation is IRefundConfirmation, AsterizmOwnable {

    using UintLib for uint;

    /// Deploy contract event
    /// @param _selfAddress address
    event DeployRefundConfirmationContractEvent(address _selfAddress);

    uint static hash_;

    constructor() {
        require(tvm.pubkey() == 0, AsterizmErrors.REFUND__NON_ZERO_PUBLIC_KEY__ERROR);
        require(owner_.value != 0, AsterizmErrors.REFUND__WRONG_WALLET_OWNER__ERROR);
        require(owner_ == msg.sender, AsterizmErrors.REFUND__WRONG_OWNER__ERROR);

        emit DeployRefundConfirmationContractEvent(address(this));

        tvm.rawReserve(AsterizmEnvs.REFUND__MIN_CONTRACT_BALANCE, 0);
        owner_.transfer({ value: 0, flag: AsterizmTransferFlags.ALL_NOT_RESERVED, bounce: false });
    }

    /// Is confirmation exists
    /// @param _transferHash uint128  Small transfer hash
    /// @return uint, bool
    function isExists(uint128 _transferHash) external internalMsg view responsible override returns(uint, bool) {
        uint baseHash = hash_;
        require(baseHash.toUint128() == _transferHash, AsterizmErrors.REFUND__WRONG_HASH__ERROR);
        tvm.rawReserve(AsterizmEnvs.REFUND__MIN_CONTRACT_BALANCE, 0);

        return { value: 0, flag: AsterizmTransferFlags.ALL_NOT_RESERVED, bounce: false } (hash_, true);
    }
}
